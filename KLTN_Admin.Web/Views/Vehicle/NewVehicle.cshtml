@model VehicleAddViewModel

@{
    var vehicleTypes = (IEnumerable<ConstSharedModel>)ViewBag.VehicleTypes;

    var agentList = (IEnumerable<AgentViewModel>)ViewBag.ListAgent;
}

@section Styles {
    <style>
        :root {
            --width: 70px;
        }

        input.seat-number-input {
            width: var(--width);
        }

        td {
            width: var(--width);
            text-align: center;
        }

        span.edit-seat i {
            font-size: 32px;
        }

        .check_isonline{
            margin-top: 31px;
        }
    </style>
}

<div class="container">
    <form method="post" asp-controller="Vehicle" asp-action="NewVehicle" id="form-add-vehicle">
        <label class="dynamic-text">Thông tin xe</label>
        <div class="form-row">
            <div class="col-4 form-group">
                <label asp-for="Name"></label>
                <input type="text" asp-for="Name" class="form-control" />
            </div>
            <div class="col-4 form-group">
                <label asp-for="VehicleType"></label>
                <select asp-for="VehicleType" class="form-control">
                    @foreach (var item in vehicleTypes)
                    {
                        <option value="@item.Id" data-value="@item.Value">@item.DisplayValue</option>
                    }
                </select>
            </div>
            <div class="col-4 form-group">
                <div class="check_isonline">
                    <input class="form-check-input" type="checkbox" checked id="IsOnline">
                    <label class="form-check-label" for="IsOnline">
                        IsOnline
                    </label>
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col-4 form-group">
                <label asp-for="LicensePlates">Biến số xe</label>
                <input type="text" asp-for="LicensePlates" class="form-control" />
            </div>
            <div class="col-4 form-group">
                <label asp-for="TotalSeats"></label>
                <input type="number" asp-for="TotalSeats" class="form-control" />
            </div>
            <div class="col-4 form-group">
                <label asp-for="VehicleAgent">Nhà Xe</label>
                <select asp-for="VehicleAgent" class="form-control">
                    @foreach (var item in agentList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="form-row">
            <div class="col-6 form-group">
                <label asp-for="StartLocation"></label>
                <input type="text" id="StartLocation" name="Location" class="form-control" />
                <input type="text"  class="locationLatitude" name="LatitudeLocation" />
                <input type="text"  class="locationLongitude" name="LongtitudeLocation" />
            </div>

            <div class="col-6 form-group">
                <label asp-for="StartProvince"></label>
                <input type="text" id="StartProvince" name="LocationProvince" class="form-control" />
                <input type="text"  class="locationLatitude"  name="LatitudeProvince"  />
                <input type="text"  class="locationLongitude" name="LongtitudeProvince" />
            </div>
        </div>
        <div class="form-row">
            <div class="col-6 form-group">
                <label asp-for="EndLocation"></label>
                <input type="text" id="EndLocation" name="Location" class="form-control" />
                <input type="text"  class="locationLatitude" name="LatitudeLocation" />
                <input type="text"  class="locationLongitude" name="LongtitudeLocation" />
            </div>

            <div class="col-6 form-group">
                <label asp-for="EndProvince"></label>
                <input type="text" id="EndProvince" name="LocationProvince" class="form-control" />
                <input type="text"  class="locationLatitude"  name="LatitudeProvince" />
                <input type="text"  class="locationLongitude" name="LongtitudeProvince" />
            </div>
        </div>

        <div id="fillStation">

        </div>

        <input class="btn btn-info add-station-vehicle" value="Thêm trạm dừng" />
        <br />

        <div id="seat-map">

        </div>

        <input type="submit" class="btn btn-primary" id="btn-submit-add-vehicle" value="Thêm Xe" />
    </form>
</div>



@section Scripts {
    <script src="~/js/draw-map.js"></script>

    <script type="text/javascript">
        var startLocation = 'LocationFrom';
        var endLocation = 'LocationTo';

        var autocompleteStartLocation, autocompleteEndLocation;

        function drawMapByVehicleTypeAndAgent() {
            if (!$('#IsOnline').is(':checked')) {
                return;
            }

            let agentId = $('#VehicleAgent').val();
            let vehicleTypeId = $('#VehicleType').val();

            $.get('/Vehicle/GetMap', { agentId: agentId, vehicleType: vehicleTypeId }, data => {
                $('#seat-map').html('');
                if (data) {
                    let customHtml = `
                            <input type="hidden" class="seat-index" value="{number}" />
                            <input type="hidden" class="number-seat-pair" name="NumberSeats" value="{number}-" />
                            <label class="seat-number-display"></label>
                            <span class="edit-seat"><i class="mdi mdi-pencil"></i></span>
                            <input type="text" style="display: none;" class="seat-number-input" />
                        `;

                    let content = _mapDrawer.draw(data.width, data.height, data.orderType, customHtml);
                    $("#seat-map").html(content);
                }
            });
        }

        function showEditSeat(e, currentValue) {
            let seatCount = $('#TotalSeats').val();
            let seats = getCurrentSeat();
            console.log(currentValue);
            if (seats >= seatCount && !currentValue) {
                return;
            }

            let allVisibilities = $('input.seat-number-input').map((_, item) => $(item).is(':visible')).get();
            if (allVisibilities.includes(true)) {
                return;
            }

            let parent = $(e.target).closest('td');
            $(e.target).hide();

            let inputEdit = parent.find('input.seat-number-input');
            if (currentValue) {
                inputEdit.val(currentValue);
            }

            inputEdit.show();
            inputEdit.focus();
        }

        function getCurrentSeat() {
            let seats = $('.number-seat-pair').map((_, item) => $(item).val().toString().split('-')[1]).get();
            return seats.filter(item => item.trim().length > 0).length;
        }

        function autoCompleteGooogleMap() {
            var acInputs = document.getElementsByClassName("location_GGMap");

            for (let i = 0; i < acInputs.length; i++) {

                var autocomplete = new google.maps.places.Autocomplete(acInputs[i], {
                    types: ['geocode', 'establishment'],
                    componentRestrictions: { country: "vn" }
                });
                autocomplete.inputId = acInputs[i].id;

                google.maps.event.addListener(autocomplete, 'place_changed', function () {
                    let palce = autocomplete.getPlace();

                    let parent = $(`#` + this.inputId).closest('div');
                    let inputLatitude = parent.find('input.locationLatitude');
                    let inputLongitude = parent.find('input.locationLongitude');

                    inputLatitude.val(palce.geometry.location.lat());
                    inputLongitude.val(palce.geometry.location.lng());
                });
            }
        };

        function autoCompleteGooogleMapCities() {
            var acInputs = document.getElementsByClassName("location_GGMapCities");

            for (let i = 0; i < acInputs.length; i++) {

                let autocomplete = new google.maps.places.Autocomplete(acInputs[i], {
                    types: ['(cities)'],
                    componentRestrictions: { country: "vn" }
                });
                autocomplete.inputId = acInputs[i].id;

                google.maps.event.addListener(autocomplete, 'place_changed', function () {
                    let palce = autocomplete.getPlace();

                    let parent = $(`#` + this.inputId).closest('div');
                    let inputLatitude = parent.find('input.locationLatitude');
                    let inputLongitude = parent.find('input.locationLongitude');

                    inputLatitude.val(palce.geometry.location.lat());
                    inputLongitude.val(palce.geometry.location.lng());
                });
            }
        };

        function setLatAndLongLocation(id) {
            let autocomplete = new google.maps.places.Autocomplete(document.getElementById(id), {
                types: ['geocode', 'establishment'],
                componentRestrictions: { country: "vn" }
            });
            autocomplete.inputId = id;

            google.maps.event.addListener(autocomplete, 'place_changed', function () {
                let palce = autocomplete.getPlace();

                let parent = $(`#` + this.inputId).closest('div');
                let inputLatitude = parent.find('input.locationLatitude');
                let inputLongitude = parent.find('input.locationLongitude');

                inputLatitude.val(palce.geometry.location.lat());
                inputLongitude.val(palce.geometry.location.lng());
            });
        }

        function setLatAndLongLocationProvince(id) {
            let autocomplete = new google.maps.places.Autocomplete(document.getElementById(id), {
                types: ['(cities)'],
                componentRestrictions: { country: "vn" }
            });
            autocomplete.inputId = id;

            google.maps.event.addListener(autocomplete, 'place_changed', function () {
                let palce = autocomplete.getPlace();

                let parent = $(`#` + this.inputId).closest('div');
                let inputLatitude = parent.find('input.locationLatitude');
                let inputLongitude = parent.find('input.locationLongitude');

                inputLatitude.val(palce.geometry.location.lat());
                inputLongitude.val(palce.geometry.location.lng());
            });
        }

        $(".add-station-vehicle").on("click", () => {
            var customHtml = `
                <div class="form-row">
                <div class="col-6 form-group">
                    <label >Trạm dừng</label>
                    <input type="text" id="LocationAddStation${new Date().getMilliseconds()}" name="LocationAddStation" class="form-control location_GGMap" />
                    <input type="text"  class="locationLatitude" name="LatitudeLocationAddStation" />
                    <input type="text"  class="locationLongitude" name="LongitudeLocationAddStation" />
                </div>
                <div class="col-6 form-group">
                    <label >Tỉnh, Thành phố</label>
                    <input type="text" id="LocationAddProvince${new Date().getMilliseconds()}" name="LocationAddProvince" class="form-control location_GGMapCities" />
                    <input type="text"  class="locationLatitude"  name="LatitudeLocationAddProvince" />
                    <input type="text"  class="locationLongitude" name="LongitudeLocationAddProvince" />
                </div>
                </div>
            `;
            $('#fillStation').append(customHtml);
        });

        $('#fillStation').bind('DOMSubtreeModified', function () {
            autoCompleteGooogleMap();
            autoCompleteGooogleMapCities();
        });

        $('#IsOnline').on('change', e => {
            if (!$(e.target).is(':checked')) {
                $('#seat-map').html('');
            } else {
                drawMapByVehicleTypeAndAgent();
            }
        });

        $(document).ready(function () {
            setLatAndLongLocation("StartLocation");
            setLatAndLongLocation("EndLocation");
            setLatAndLongLocationProvince("StartProvince");
            setLatAndLongLocationProvince("EndProvince");


            $('#VehicleType').on('change', () => {
                drawMapByVehicleTypeAndAgent();
            });

            $('#VehicleAgent').on('change', () => {
                drawMapByVehicleTypeAndAgent();
            });

            $('#seat-map').on('click', '.edit-seat', e => {
                showEditSeat(e);
            });

            $('#seat-map').on('click', 'label.seat-number-display', e => {
                showEditSeat(e, $(e.target).html());
            });

            $('#seat-map').on('blur', 'input.seat-number-input', e => {
                let me = $(e.target);
                let parent = me.closest('td');
                let inputSeatNumber = parent.find('input.seat-number-input');
                let seatNumber = inputSeatNumber.val();
                let seatNumberPair = parent.find('input.number-seat-pair');

                let allSeats = $('.seat-number-input').map((_, item) => $(item).val()).get();
                let exist = false;
                let count = 0;
                for (let i = 0; i < allSeats.length; i++) {
                    if (allSeats[i] == seatNumber) {
                        count++;
                    }

                    if (count >= 2) {
                        exist = true;
                        break;
                    }
                }

                if (exist) {
                    if (seatNumber.toString().trim()) {
                        inputSeatNumber.focus();
                    } else {
                        me.hide();
                        seatNumberPair.val(seatNumberPair.val().split('-')[0] + '-');
                        parent.find('.edit-seat').find('i').show();
                    }

                    return;
                }

                let display = parent.find('label.seat-number-display');
                display.html(seatNumber.toString());

                
                let data = seatNumberPair.val().split("-");
                let newData = data[0] + '-' + seatNumber;
                seatNumberPair.val(newData);

                me.hide();
                display.show();
            });

            $('#form-add-vehicle').on('submit', e => {
                let seatCount = $('#TotalSeats').val();
                let seats = getCurrentSeat();

                if (seatCount != seats) {
                    alert('So luong ghe khong khop');
                    return false;
                }

                return true;
            });
        });
    </script>
}